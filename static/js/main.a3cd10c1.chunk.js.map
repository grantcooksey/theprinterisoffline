{"version":3,"sources":["components/desktop/desktop.js","components/menu/menu.js","components/systemtray/systemtray.js","components/taskbar/taskbar.js","components/app/app.js","serviceWorker.js","index.js"],"names":["ClippyStyle","styled","div","MyComponent","clippy","useClippy","useEffect","interval","setInterval","speak","clearInterval","Desktop","agentName","AGENTS","CLIPPY","MenuStyle","Menu","useState","open","setOpen","horizontalAlign","verticalAlign","onClick","role","aria-label","disabled","active","style","fontWeight","src","icons","user_1","alt","clockConfig","hour","minute","hour12","SystemTrayStyle","SystemTrayItem","TrayIcon","img","AlertIcon","SystemTray","Date","currentDate","setDate","date","toLocaleTimeString","width","position","right","transform","display","alignItems","justifyContent","marginRight","marginTop","size","square","variant","print","warning","appBarStyle","top","bottom","ApplicationsStyle","TaskBar","ResetStyles","createGlobalStyle","reset","AppStyle","App","theme","themes","default","Boolean","window","location","hostname","match","Body","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAIA,IAAMA,EAAcC,UAAOC,IAAV,KAMXC,EAAc,WAAO,IACfC,EAAWC,sBAAXD,OAaR,OAXAE,qBAAU,WACN,IAAMC,EAAWC,aAAY,WAEzBJ,EAAOK,MAAM,6DACd,KAEH,OAAO,WACLC,cAAcH,OAIZ,+BAaGI,MAVf,WACI,OACI,kBAACX,EAAD,KACI,kBAAC,iBAAD,CAAgBY,UAAWC,SAAOC,QAC9B,kBAAC,EAAD,S,mKC1BhB,IAAMC,EAAYd,UAAOC,IAAV,KAmCAc,MA7Bf,WAAiB,IAAD,EACYC,oBAAS,GADrB,mBACLC,EADK,KACCC,EADD,KAWZ,OACI,kBAACJ,EAAD,KACKG,GACD,kBAAC,OAAD,CAAME,gBAAgB,OAAOC,cAAc,MAAMH,KAAMA,EAAMI,QAPrE,WACIH,GAAQ,KAOA,kBAAC,WAAD,KAAU,0BAAMI,KAAK,MAAMC,aAAW,0BAA5B,kCAAV,aACA,kBAAC,WAAD,KAAU,0BAAMD,KAAK,MAAMC,aAAW,OAA5B,gBAAV,cACA,kBAAC,UAAD,MACA,kBAAC,WAAD,CAAUC,UAAQ,GAAC,0BAAMF,KAAK,MAAMC,aAAW,cAA5B,gBAAnB,YAGJ,kBAAC,SAAD,CAAQF,QAlBhB,WACIH,GAASD,IAiByBQ,OAAQR,EAAMS,MAAO,CAAEC,WAAY,SACjE,yBAAKC,IAAMC,IAAMC,OAASC,IAAI,iBAD9B,W,siBC3BZ,IAAMC,EAAc,CAChBC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAGNC,EAAkBpC,UAAOC,IAAV,KAQfoC,EAAiBrC,UAAOC,IAAV,KAKdqC,EAAWtC,UAAOuC,IAAV,KAIRC,EAAYxC,UAAOuC,IAAV,KAmEAE,MA5Df,WAAuB,IAAD,EACazB,mBAAS,IAAI0B,MAD1B,mBACXC,EADW,KACEC,EADF,OAGM5B,oBAAS,GAHf,mBAGXC,EAHW,KAGLC,EAHK,KAuBlB,OAVAb,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BqC,GAAQ,SAAAC,GAAI,OAAI,IAAIH,UACnB,KAEH,OAAO,WACLjC,cAAcH,MAEf,IAGC,kBAAC,SAAD,CAAQoB,MAAO,CAAE,OAAU,SACvB,kBAACU,EAAD,KACI,kBAACC,EAAD,KACI,2BAAKM,EAAYG,mBAAmB,GAAId,KAE5C,kBAACK,EAAD,KACKpB,GACD,kBAAC,SAAD,CAAQS,MAAO,CAAEqB,MAAO,IAAKC,SAAU,WAAYC,MAAO,IAAKC,UAAW,wBACtE,kBAAC,eAAD,CACIxB,MAAO,CACPyB,QAAS,OACTC,WAAY,SACZC,eAAgB,kBAGhB,4DACA,kBAAC,SAAD,CAAQ3B,MAAO,CAAE4B,YAAa,OAAQC,UAAW,OAASC,KAAM,KAAMnC,QA/B9F,WACIH,GAAQ,IA8BwGuC,QAAM,GAC9F,0BAAM/B,MAAO,CAAEC,WAAY,OAAQuB,UAAW,qBAA9C,OAGR,kBAAC,gBAAD,KACI,4DACA,qEAIR,kBAAC,SAAD,CAAQQ,QAAQ,OAAOhC,MAAO,CAAE,OAAU,OAAQ,SAAY,YAAcD,OAAQR,EAAMI,QA7C1G,WACIH,GAASD,KA6CO,kBAACqB,EAAD,CAAUV,IAAMC,IAAM8B,MAAQ5B,IAAI,YAClC,kBAACS,EAAD,CAAWZ,IAAMC,IAAM+B,QAAU7B,IAAI,iB,2FCjF7D,IAAM8B,EAAc,CAChBC,IAAK,OACLC,OAAQ,GAGNC,EAAoBhE,UAAOC,IAAV,KAkBRgE,MAdf,WACI,OACI,kBAAC,SAAD,CAAQvC,MAAQmC,GACZ,kBAAC,UAAD,CAASnC,MAAO,CAAE,eAAkB,kBAChC,kBAACsC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,MAAD,OAEJ,kBAAC,EAAD,S,qbChBhB,IAAME,EAAcC,4BAAH,IACXC,SAaAC,EAAWrE,UAAOC,IAAV,KAmBCqE,MAdf,WACI,OACI,6BACI,kBAACJ,EAAD,MACA,kBAAC,gBAAD,CAAeK,MAAQC,SAAOC,SAC1B,kBAACJ,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,UCrBAK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4WCZN,IAAMC,EAAOZ,4BAAH,KAWVa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,MACA,kBAAC,EAAD,OAEFI,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a3cd10c1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useClippy, ClippyProvider, AGENTS } from '@react95/clippy';\n\nconst ClippyStyle = styled.div`\n    position: absolute;\n    bottom: 200px;\n    right: 20%;\n`;\n\nconst MyComponent = () => {\n    const { clippy } = useClippy();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            // clippy.play('Wave')\n            clippy.speak(\"Hey Trace, did you make sure the printer is plugged in?\")\n        }, 10000);\n  \n        return () => {\n          clearInterval(interval);\n        };\n      });\n\n    return (<div></div>);  // no-op\n};\n\nfunction Desktop() {\n    return (\n        <ClippyStyle>\n            <ClippyProvider agentName={AGENTS.CLIPPY}>\n                <MyComponent />\n            </ClippyProvider>\n        </ClippyStyle>\n    );\n};\n\nexport default Desktop;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button, List, ListItem, Divider } from 'react95';\nimport icons from '@react95/icons';\n\nconst MenuStyle = styled.div`\n    position: relative;\n    display: inline-block;\n    padding-right: 4px;\n`;\n\nfunction Menu() {\n    const [open, setOpen] = useState(false);\n\n    function handleClick() {\n        setOpen(!open);\n    }\n\n    function handleClose() {\n        setOpen(false);\n    }\n\n    return (\n        <MenuStyle>\n            {open && (\n            <List horizontalAlign=\"left\" verticalAlign=\"top\" open={open} onClick={handleClose}>\n                <ListItem><span role=\"img\" aria-label=\"person behind computer\">üë®‚Äçüíª</span> About Me</ListItem>\n                <ListItem><span role=\"img\" aria-label=\"eye\">üëÅ</span> About You</ListItem>\n                <Divider />\n                <ListItem disabled><span role=\"img\" aria-label=\"back arrow\">üîô</span> Logout</ListItem>\n            </List>\n            )}\n            <Button onClick={handleClick} active={open} style={{ fontWeight: 'bold' }}>\n            <img src={ icons.user_1 } alt=\"Windows logo\"></img>\n            Start\n            </Button>\n        </MenuStyle>\n    );\n};\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Cutout, Button, Window, WindowHeader, WindowContent } from 'react95';\nimport icons from '@react95/icons';\n\nconst clockConfig = {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n};\n\nconst SystemTrayStyle = styled.div`\n    display: flex;\n    padding: 0px 15px 0px 5px;\n    height: 100%;\n    line-height: 27px;\n    flex-direction: row-reverse;\n`;\n\nconst SystemTrayItem = styled.div`\n    padding: 0px 5px;\n    position: relative;\n`;\n\nconst TrayIcon = styled.img`\n    height: 85%;\n`;\n\nconst AlertIcon = styled.img`\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 50%;\n`;\n\nfunction SystemTray() {\n    const [currentDate, setDate] = useState(new Date());\n\n    const [open, setOpen] = useState(false);\n\n    function handleClick() {\n        setOpen(!open);\n    }\n\n    function handleClose() {\n        setOpen(false);\n    }\n\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setDate(date => new Date());\n      }, 60000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, []);\n\n    return (\n        <Cutout style={{ \"height\": \"35px\" }}>\n            <SystemTrayStyle>\n                <SystemTrayItem>\n                    <p>{ currentDate.toLocaleTimeString([], clockConfig) }</p>\n                </SystemTrayItem>\n                <SystemTrayItem>\n                    {open && (\n                    <Window style={{ width: 300, position: \"absolute\", right: \"0\", transform: \"translate(0, -100%)\"}}>\n                        <WindowHeader\n                            style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'space-between',\n                            }}\n                        >\n                            <span>A Message From The Printer</span>\n                            <Button style={{ marginRight: '-6px', marginTop: '1px' }} size={'sm'} onClick={handleClose} square>\n                                <span style={{ fontWeight: 'bold', transform: 'translateY(-1px)' }}>x</span>\n                            </Button>\n                        </WindowHeader>\n                        <WindowContent>\n                            <p>You have a print job pending!</p>\n                            <p>The printer appears to be offline...</p>\n                        </WindowContent>\n                    </Window>\n                    )}\n                    <Button variant=\"menu\" style={{ \"height\": \"100%\", \"position\": \"relative\" }} active={open} onClick={handleClick}>\n                        <TrayIcon src={ icons.print } alt=\"printer\"></TrayIcon>\n                        <AlertIcon src={ icons.warning } alt=\"warning\"></AlertIcon>\n                    </Button>\n                </SystemTrayItem>\n            </SystemTrayStyle>\n        </Cutout>\n    );\n};\n\nexport default SystemTray;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bar, AppBar, Toolbar } from 'react95';\nimport Menu from '../menu';\nimport SystemTray from '../systemtray';\n\nconst appBarStyle = {\n    top: \"auto\",\n    bottom: 0\n};\n\nconst ApplicationsStyle = styled.div`\n    display: flex;\n`;\n\nfunction TaskBar() {\n    return (\n        <AppBar style={ appBarStyle }>\n            <Toolbar style={{ \"justifyContent\": \"space-between\" }}>\n                <ApplicationsStyle>\n                    <Menu />\n                    <Bar />\n                </ApplicationsStyle>\n                <SystemTray />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default TaskBar;","import React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport styled from 'styled-components';\nimport { reset, themes } from 'react95';\nimport Desktop from '../desktop';\nimport TaskBar from '../taskbar';\n\nconst ResetStyles = createGlobalStyle`\n    ${reset}\n    body {\n        overflow: hidden;\n    }\n\n    /* HACK I can't figure out how to target clippy */\n    .clippy {\n        position: absolute;\n        top: 200px !important;\n        right: 80px !important;\n    }\n`;\n\nconst AppStyle = styled.div`\n    background-color: rgb(17, 128, 128);\n    min-height: 100vh;\n`;\n\nfunction App() {\n    return (\n        <div>\n            <ResetStyles />\n            <ThemeProvider theme={ themes.default }>\n                <AppStyle>\n                    <Desktop />\n                    <TaskBar />\n                </AppStyle>\n            </ThemeProvider>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle } from 'styled-components';\n\nconst Body = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Body />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}